{"version":3,"sources":["components/Food.js","components/Snake.js","firebase/firebaseConfig.js","screens/SnakeBoard.js","helpers/scores.js","screens/BeginScreen.js","screens/MultiplayerSnakeBoard.js","App.js","index.js"],"names":["FoodBody","styled","div","Food","SnakeBody","Snake","color","style","backgroundColor","config","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","MainContainer","LeaderBoard","GameContainer","BlankBlock","PlayerInformationContainer","PlayerName","h1","PlayerHighScore","p","SnakeBoard","initialRows","i","push","k","randomPosition","x","Math","floor","random","y","useState","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","players","setPlayers","localStorage","getItem","username","useEffect","forEach","cell","width","height","filter","length","userNameUser","prompt","setItem","window","location","reload","database","ref","limitToLast","on","snapchot","childSnapchot","previousArr","val","data","USER","isUserThere","currentHigh","child","update","name","onkeydown","e","keyCode","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newSnake","pop","newRows","displaySnake","map","player","index","key","display","flexDirection","row","fontFamily","BeginContainer","BeginButton","BeginScreen","Children","startGame","setStartGame","onClick","ScoresContainer","PlayerScore","MultiplayerSnakeBoard","snake2","setSnake2","direction1","setDirection1","direction2","setDirection2","alert","SwitchGameMode","App","multiplayerMode","setMultiplayerMode","previousState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9121126.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst FoodBody = styled.div`\n  background-color: #6e7c7c;\n  width: 30px;\n  height: 30px;\n  border-radius: 10px;\n`;\n\nconst Food = () => {\n  return <FoodBody />;\n};\n\nexport default Food;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SnakeBody = styled.div`\n  width: 30px;\n  height: 30px;\n  border-radius: 10px;\n`;\n\nconst Snake = ({ color }) => {\n  return <SnakeBody style={{ backgroundColor: color }} />;\n};\nexport default Snake;\n","import firebase from \"firebase\";\n\nlet firebaseConfig = {\n  apiKey: \"AIzaSyBTqgyU-g6MDf_uSUlYOM_5vteMbVRCjq4\",\n  authDomain: \"snake-game-5546e.firebaseapp.com\",\n  projectId: \"snake-game-5546e\",\n  storageBucket: \"snake-game-5546e.appspot.com\",\n  messagingSenderId: \"414371442762\",\n  appId: \"1:414371442762:web:6dbc002507cb4713f976b3\",\n  measurementId: \"G-CBVJ085LWD\",\n};\n\nlet config = firebase.initializeApp(firebaseConfig);\n\nexport default config;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Food from \"../components/Food.js\";\nimport Snake from \"../components/Snake.js\";\nimport firebase from \"../firebase/firebaseConfig\";\nimport { submitScores } from \"../helpers/scores\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst LeaderBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 400px;\n`;\n\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst BlankBlock = styled.div`\n  background-color: #435560;\n  width: 30px;\n  height: 30px;\n`;\n\nconst PlayerInformationContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  margin: 8px;\n  border: 1px solid gray;\n`;\n\nconst PlayerName = styled.h1`\n  font-size: 20px;\n  font-family: sans-serif;\n  padding-right: 5px;\n`;\n\nconst PlayerHighScore = styled.p`\n  font-size: 18px;\n  font-family: sans-serif;\n`;\n\nconst width = 18;\nconst height = 18;\n\nconst SnakeBoard = () => {\n  let initialRows = [];\n  for (let i = 0; i < height; i++) {\n    initialRows.push([]);\n    for (let k = 0; k < width; k++) {\n      initialRows[i].push(\"blank\");\n    }\n  }\n\n  const randomPosition = () => {\n    const position = {\n      x: Math.floor(Math.random() * width),\n      y: Math.floor(Math.random() * height),\n    };\n    return position;\n  };\n\n  const [rows, setRows] = useState(initialRows);\n  const [snake, setSnake] = useState([\n    { x: 1, y: 1 },\n    { x: 2, y: 1 },\n  ]);\n  const [direction, setDirection] = useState();\n  const [food, setFood] = useState(randomPosition);\n  const [players, setPlayers] = useState([]);\n  const [username, setUsername] = useState(\n    localStorage.getItem(\"userNameUser\")\n  );\n\n  useEffect(() => {\n    snake.forEach((cell) => {\n      //check collision with walls\n      if (\n        snake[0].x > width - 1 ||\n        snake[0].y > height - 1 ||\n        snake[0].x < 0 ||\n        snake[0].y < 0\n      ) {\n        setSnake([\n          { x: 1, y: 1 },\n          { x: 2, y: 1 },\n        ]);\n\n        setDirection();\n      }\n      //check collision with its self\n    });\n\n    let arr = snake.filter(\n      (cell) => snake[0].x === cell.x && snake[0].y === cell.y\n    );\n\n    if (arr.length === 2) {\n      setSnake([\n        { x: 1, y: 1 },\n        { x: 2, y: 1 },\n      ]);\n\n      setDirection();\n    }\n  }, [snake]);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"userNameUser\")) {\n      const userNameUser = prompt(\"Please enter your username: \");\n      localStorage.setItem(\"userNameUser\", userNameUser);\n      window.location.reload();\n    }\n\n    firebase\n      .database()\n      .ref(\"scores\")\n      .limitToLast(11)\n      .on(\"value\", (snapchot) => {\n        setPlayers([]);\n        snapchot.forEach((childSnapchot) => {\n          setPlayers((previousArr) => [...previousArr, childSnapchot.val()]);\n        });\n      });\n  }, []);\n\n  useEffect(() => {\n    submitScores(snake.length, username);\n  }, [snake.length]);\n\n  onkeydown = (e) => {\n    switch (e.keyCode) {\n      case 37:\n        if (direction !== \"right\") {\n          setDirection(\"left\");\n        }\n        break;\n      case 38:\n        if (direction !== \"bottom\") {\n          setDirection(\"top\");\n        }\n        break;\n      case 39:\n        if (direction !== \"left\") {\n          setDirection(\"right\");\n        }\n        break;\n      case 40:\n        if (direction !== \"top\") {\n          setDirection(\"bottom\");\n        }\n        break;\n    }\n  };\n\n  const displaySnake = () => {\n    const newRows = initialRows;\n    snake.forEach((cell) => {\n      newRows[cell.x][cell.y] = \"snake\";\n    });\n    newRows[food.x][food.y] = \"food\";\n    setRows(newRows);\n  };\n\n  const moveSnake = () => {\n    if (direction) {\n      const newSnake = [];\n      switch (direction) {\n        case \"right\":\n          newSnake.push({ x: snake[0].x, y: snake[0].y + 1 });\n          break;\n        case \"left\":\n          newSnake.push({ x: snake[0].x, y: snake[0].y - 1 });\n          break;\n        case \"top\":\n          newSnake.push({ x: snake[0].x - 1, y: snake[0].y });\n          break;\n        case \"bottom\":\n          newSnake.push({ x: snake[0].x + 1, y: snake[0].y });\n      }\n      snake.forEach((cell) => {\n        newSnake.push(cell);\n      });\n\n      if (snake[0].x === food.x && snake[0].y === food.y) {\n        setFood(randomPosition);\n      } else {\n        newSnake.pop();\n      }\n      setSnake(newSnake);\n    }\n    displaySnake();\n  };\n\n  useInterval(moveSnake, 150);\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  return (\n    <MainContainer>\n      <LeaderBoard>\n        {players.map((player, index) => {\n          return (\n            <PlayerInformationContainer\n              key={player}\n              style={{ display: \"flex\", flexDirection: \"row\" }}\n            >\n              <PlayerName>{player.name}</PlayerName>\n              <PlayerHighScore>{player[\"high-score\"]}</PlayerHighScore>\n            </PlayerInformationContainer>\n          );\n        })}\n      </LeaderBoard>\n      <GameContainer>\n        {rows.map((row) => (\n          <div style={{ display: \"flex\", backgroundColor: \"#435560\" }}>\n            {row.map((e) => {\n              switch (e) {\n                case \"blank\":\n                  return <BlankBlock />;\n                case \"snake\":\n                  return <Snake color=\"#c8c6a7\" />;\n                case \"food\":\n                  return <Food />;\n              }\n            })}\n          </div>\n        ))}\n        <h1\n          style={{ fontFamily: \"sans-serif\" }}\n        >{`your score is:  ${snake.length}`}</h1>\n      </GameContainer>\n    </MainContainer>\n  );\n};\n\nexport default SnakeBoard;\n","import firebase from \"../firebase/firebaseConfig\";\n\nexport const submitScores = (data, USER) => {\n  firebase\n    .database()\n    .ref(\"/scores/\" + USER)\n    .on(\"value\", (snapchot) => {\n      let isUserThere = snapchot.val();\n      if (isUserThere) {\n        let currentHigh = snapchot.val()[\"high-score\"];\n        if (data > currentHigh) {\n          firebase\n            .database()\n            .ref(\"scores\")\n            .child(USER)\n            .update({ \"high-score\": data });\n        }\n      } else if (!isUserThere) {\n        firebase\n          .database()\n          .ref(\"scores\")\n          .child(USER)\n          .update({ \"high-score\": data, name: USER });\n      }\n    });\n};\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst BeginContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: gray;\n`;\n\nconst BeginButton = styled.div`\n  display: flex;\n  width: 250px;\n  height: 50px;\n  border-radius: 10px;\n  background-color: black;\n  font-size: 20px;\n  font-family: sans-serif;\n  color: white;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst BeginScreen = ({ Children }) => {\n  const [startGame, setStartGame] = useState(false);\n  return (\n    <div>\n      {startGame ? (\n        <Children />\n      ) : (\n        <BeginContainer>\n          <BeginButton\n            onClick={() => {\n              setStartGame(true);\n            }}\n          >\n            Start\n          </BeginButton>\n        </BeginContainer>\n      )}\n    </div>\n  );\n};\n\nexport default BeginScreen;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Food from \"../components/Food.js\";\nimport Snake from \"../components/Snake.js\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst BlankBlock = styled.div`\n  background-color: #435560;\n  width: 30px;\n  height: 30px;\n`;\n\nconst ScoresContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-right: 50px;\n`;\n\nconst PlayerScore = styled.p`\n  font-size: 20px;\n  font-family: sans-serif;\n  color: #435560;\n  padding: 10px;\n`;\n\nconst width = 18;\nconst height = 18;\n\nconst MultiplayerSnakeBoard = () => {\n  let initialRows = [];\n  for (let i = 0; i < height; i++) {\n    initialRows.push([]);\n    for (let k = 0; k < width; k++) {\n      initialRows[i].push(\"blank\");\n    }\n  }\n\n  const randomPosition = () => {\n    const position = {\n      x: Math.floor(Math.random() * width),\n      y: Math.floor(Math.random() * height),\n    };\n    return position;\n  };\n\n  const [rows, setRows] = useState(initialRows);\n  const [snake, setSnake] = useState([\n    { x: 1, y: 1 },\n    { x: 2, y: 1 },\n  ]);\n  const [snake2, setSnake2] = useState([\n    { x: 1, y: 16 },\n    { x: 2, y: 16 },\n  ]);\n  const [direction1, setDirection1] = useState();\n  const [direction2, setDirection2] = useState();\n  const [food, setFood] = useState(randomPosition);\n  // const [players, setPlayers] = useState([]);\n  const [username, setUsername] = useState(\n    localStorage.getItem(\"userNameUser\")\n  );\n\n  useEffect(() => {\n    //check collision with walls\n    if (\n      snake[0].x > width - 1 ||\n      snake[0].y > height - 1 ||\n      snake[0].x < 0 ||\n      snake[0].y < 0\n    ) {\n      alert(`white player: ${snake.length}  ;  red player: ${snake2.length}`);\n      window.location.reload();\n    }\n\n    //check collision with walls\n    if (\n      snake2[0].x > width - 1 ||\n      snake2[0].y > height - 1 ||\n      snake2[0].x < 0 ||\n      snake2[0].y < 0\n    ) {\n      alert(`white player: ${snake.length}  ;  red player: ${snake2.length}`);\n      window.location.reload();\n    }\n    //check collision with its self\n    let filterSnake = snake.filter(\n      (cell) => snake[0].x === cell.x && snake[0].y === cell.y\n    );\n\n    if (filterSnake.length === 2) {\n      alert(`white player: ${snake.length}  ;  red player: ${snake2.length}`);\n      window.location.reload();\n    }\n    //check collision with its self\n    let filterSnake2 = snake2.filter(\n      (cell) => snake2[0].x === cell.x && snake2[0].y === cell.y\n    );\n\n    if (filterSnake2.length === 2) {\n      alert(`white player: ${snake.length}  ;  red player: ${snake2.length}`);\n      window.location.reload();\n    }\n  }, [snake]);\n\n  onkeydown = (e) => {\n    switch (e.keyCode) {\n      //player one keybinds\n\n      case 37:\n        if (\n          direction1 !== \"right\" &&\n          (direction1 !== \"top\" || direction1 !== \"bottom\")\n        ) {\n          setDirection1(\"left\");\n        }\n        break;\n      case 38:\n        if (\n          direction1 !== \"bottom\" &&\n          (direction1 !== \"right\" || direction1 !== \"left\")\n        ) {\n          setDirection1(\"top\");\n        }\n        break;\n      case 39:\n        if (\n          direction1 !== \"left\" &&\n          (direction1 !== \"top\" || direction1 !== \"bottom\")\n        ) {\n          setDirection1(\"right\");\n        }\n        break;\n      case 40:\n        if (\n          direction1 !== \"top\" &&\n          (direction1 !== \"right\" || direction1 !== \"left\")\n        ) {\n          setDirection1(\"bottom\");\n        }\n        break;\n      //player one keybinds\n\n      case 65:\n        if (direction2 !== \"right\") {\n          setDirection2(\"left\");\n        }\n        break;\n      case 87:\n        if (direction2 !== \"bottom\") {\n          setDirection2(\"top\");\n        }\n        break;\n      case 68:\n        if (direction2 !== \"left\") {\n          setDirection2(\"right\");\n        }\n        break;\n      case 83:\n        if (direction2 !== \"top\") {\n          setDirection2(\"bottom\");\n        }\n        break;\n    }\n  };\n\n  const displaySnake = () => {\n    const newRows = initialRows;\n    snake.forEach((cell) => {\n      newRows[cell.x][cell.y] = \"snake\";\n    });\n\n    snake2.forEach((cell) => {\n      newRows[cell.x][cell.y] = \"snake2\";\n    });\n\n    newRows[food.x][food.y] = \"food\";\n    setRows(newRows);\n  };\n\n  const moveSnake = () => {\n    displaySnake();\n    if (direction1) {\n      const newSnake = [];\n      switch (direction1) {\n        case \"right\":\n          newSnake.push({ x: snake[0].x, y: snake[0].y + 1 });\n          break;\n        case \"left\":\n          newSnake.push({ x: snake[0].x, y: snake[0].y - 1 });\n          break;\n        case \"top\":\n          newSnake.push({ x: snake[0].x - 1, y: snake[0].y });\n          break;\n        case \"bottom\":\n          newSnake.push({ x: snake[0].x + 1, y: snake[0].y });\n      }\n      snake.forEach((cell) => {\n        newSnake.push(cell);\n      });\n\n      if (snake[0].x === food.x && snake[0].y === food.y) {\n        setFood(randomPosition);\n      } else {\n        newSnake.pop();\n      }\n      setSnake(newSnake);\n    }\n  };\n\n  const moveSnake2 = () => {\n    displaySnake();\n    if (direction2) {\n      const newSnake = [];\n      switch (direction2) {\n        case \"right\":\n          newSnake.push({ x: snake2[0].x, y: snake2[0].y + 1 });\n          break;\n        case \"left\":\n          newSnake.push({ x: snake2[0].x, y: snake2[0].y - 1 });\n          break;\n        case \"top\":\n          newSnake.push({ x: snake2[0].x - 1, y: snake2[0].y });\n          break;\n        case \"bottom\":\n          newSnake.push({ x: snake2[0].x + 1, y: snake2[0].y });\n      }\n      snake2.forEach((cell) => {\n        newSnake.push(cell);\n      });\n\n      if (snake2[0].x === food.x && snake2[0].y === food.y) {\n        setFood(randomPosition);\n      } else {\n        newSnake.pop();\n      }\n      setSnake2(newSnake);\n    }\n  };\n  useInterval(moveSnake, 150);\n  useInterval(moveSnake2, 150);\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  return (\n    <div>\n      <MainContainer>\n        <ScoresContainer>\n          <PlayerScore>{`white player score :${snake.length}`}</PlayerScore>\n          <PlayerScore>{`red player score :${snake2.length}`}</PlayerScore>\n          <div style={{ backgroundColor: \"gray\" }}>\n            <h2>press the buttons to controll players, so they can appear</h2>\n            <h3>press arrows for white player</h3>\n            <h3>press w a s d for red player</h3>\n          </div>\n        </ScoresContainer>\n\n        <GameContainer>\n          {rows.map((row) => (\n            <div style={{ display: \"flex\", backgroundColor: \"#435560\" }}>\n              {row.map((e) => {\n                switch (e) {\n                  case \"blank\":\n                    return <BlankBlock />;\n                  case \"snake\":\n                    return <Snake color=\"#c8c6a7\" />;\n                  case \"food\":\n                    return <Food />;\n                  case \"snake2\":\n                    return <Snake color=\"red\" />;\n                }\n              })}\n            </div>\n          ))}\n        </GameContainer>\n      </MainContainer>\n    </div>\n  );\n};\n\nexport default MultiplayerSnakeBoard;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport SnakeBoard from \"./screens/SnakeBoard.js\";\nimport BeginScreen from \"./screens/BeginScreen\";\nimport MultiplayerSnakeBoard from \"./screens/MultiplayerSnakeBoard\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SwitchGameMode = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #5f939a;\n  padding: 15px;\n  border-radius: 4px;\n  font-family: sans-serif;\n  color: white;\n  cursor: pointer;\n  margin: 5px;\n`;\n\nfunction App() {\n  const [multiplayerMode, setMultiplayerMode] = useState(false);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"userNameUser\")) {\n      const userNameUser = prompt(\"Please enter your username: \");\n      localStorage.setItem(\"userNameUser\", userNameUser);\n      window.location.reload();\n    }\n  }, []);\n  return (\n    <MainContainer>\n      <BeginScreen\n        Children={multiplayerMode ? MultiplayerSnakeBoard : SnakeBoard}\n      />\n      <SwitchGameMode\n        onClick={() => {\n          setMultiplayerMode((previousState) => (previousState ? false : true));\n        }}\n      >\n        {multiplayerMode ? \"play singleplayer\" : \"play multiplayer\"}\n      </SwitchGameMode>\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}